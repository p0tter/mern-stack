{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","components/itemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","Modal","toogle","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","block","post","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ba496f8a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n    Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText,\r\n  Container\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component{\r\n    state = {\r\n        isOpen: false\r\n    }\r\n     \r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href=\"/\">ShoppingList</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle}/>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink href=\"https://github.com/bradtraversy\">\r\n                                        Github\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div>\r\n        );        \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AppNavbar;","import axios from 'axios';\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\r\n\r\nexport const getItems = () => dispatch =>{\r\n   dispatch(setItemsLoading());\r\n   axios \r\n    .get('/api/items')\r\n    .then(res => dispatch({\r\n        type: GET_ITEMS,\r\n        payload: res.data\r\n    }))\r\n};\r\n\r\nexport const deleteItem = (id) => dispatch =>{\r\n    axios.delete(`/api/items/${id}`)\r\n        .then(res => dispatch({\r\n            type: DELETE_ITEM,\r\n            payload: id\r\n        }))\r\n};\r\n\r\nexport const addItem = (item) => dispatch =>{\r\n    axios\r\n    .post('/api/items', item)\r\n    .then(res => dispatch({\r\n        type: ADD_ITEM,\r\n        payload: res.data\r\n    }))\r\n};\r\n\r\nexport const setItemsLoading = () =>{\r\n    return{\r\n        type: ITEMS_LOADING\r\n    };\r\n};","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';","import React, { Component } from 'react';\r\nimport { Container , ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux'\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ShoppingList extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.getItems();\r\n    }\r\n\r\n    onDeleteClick = (id) =>{\r\n        this.props.deleteItem(id);\r\n    }\r\n    render(){\r\n        \r\n        const {items} = this.props.item;\r\n        return(\r\n            <Container>\r\n                \r\n                <ListGroup>\r\n                    <TransitionGroup className=\"shopping-list\">\r\n                        {items.map(({_id,name})=>(\r\n                            <CSSTransition key = {_id} timeout ={500} classNames = \"fade\">\r\n                                <ListGroupItem>\r\n                                    <Button\r\n                                        className=\"remove-btn\"\r\n                                        color = 'danger'\r\n                                        size = 'sm'\r\n                                        onClick = {this.onDeleteClick.bind(this,_id)}\r\n                                    >&times;</Button>\r\n                                    {name}\r\n                                </ListGroupItem>\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nShoppingList.propTypes = {\r\n    getItems: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList);","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport {addItem} from '../actions/itemActions';\r\n\r\n\r\nclass ItemModal extends Component{\r\n    state ={\r\n        modal: false,\r\n        name: ''\r\n    };\r\n\r\n    toggle = () =>{\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    };\r\n\r\n    onChange = (e) =>{\r\n        this.setState({[e.target.name]: e.target.value});\r\n    };\r\n\r\n    onSubmit = e =>{\r\n        e.preventDefault();\r\n        const newItem ={\r\n           \r\n            name: this.state.name\r\n        }\r\n\r\n        this.props.addItem(newItem);\r\n        this.toggle();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button\r\n                    color = 'dark'\r\n                    className = 'add-btn'\r\n                    onClick = {this.toggle}\r\n                >Add Item</Button>\r\n\r\n                <Modal\r\n                    isOpen = {this.state.modal}\r\n                    toogle = {this.toggle}\r\n                >\r\n                    <ModalHeader\r\n                        toogle = {this.toggle}\r\n                    >Add to Shopping List</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit = {this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for='item'>Item</Label>\r\n                                <Input \r\n                                    type = 'text'\r\n                                    name = 'name'\r\n                                    id = 'item'\r\n                                    placeholder = 'Add shopping item'\r\n                                    onChange = {this.onChange}\r\n                                />\r\n                                <Button\r\n                                    color = \"dark\"\r\n                                    className = 'addItemModalbtn'\r\n                                    block\r\n                                >\r\n                                    Add Item\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, {addItem})(ItemModal);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items:[],\r\n    loading: false\r\n}\r\n\r\nexport default function (state = initialState, action){\r\n    switch(action.type){\r\n        case GET_ITEMS:\r\n            return{\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            };\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            }\r\n        case ADD_ITEM:\r\n            return{\r\n                ...state,\r\n                items: [...state.items, action.payload]\r\n            }\r\n        case ITEMS_LOADING:\r\n            return{\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\nexport default store;","import React, {Component} from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport { Provider } from 'react-redux';\nimport {Container} from 'reactstrap';\nimport ItemModal from './components/itemModal';\nimport store from './store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return(\n      <Provider store={store}>\n        <div className = \"App\">\n          <AppNavbar />\n          <Container>\n            <ItemModal />\n            <ShoppingList />\n          </Container>\n          \n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}